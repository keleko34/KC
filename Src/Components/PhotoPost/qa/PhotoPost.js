/********************************* *  PhotoPost *  Created by Keleko34 *  Shows a photo post and its needed info ********************************//* This is Your class file, it controls the states as well as the fetching of data etc. */var CreatePhotoPost = (function(){    /* Do not remove!!! */    /* BUILD SECTION */            var includeCSS = (function(){                var _styleNode = document.getElementById('Components-Styles');                if(!_styleNode){                    _styleNode = document.createElement('style');                    _styleNode.setAttribute('id','Components-Styles');                    _styleNode.setAttribute('media','screen');                    _styleNode.setAttribute('type','text/css');                    document.head.appendChild(_styleNode);                    _styleNode = document.getElementById('Components-Styles');                }                if(_styleNode.textContent.indexOf('PhotoPost') < 0){                    _styleNode.textContent += '\r\n@import "/Src/Components/PhotoPost/PhotoPost.css";';                }                return _styleNode;            }());            var template = "<div data-bind=\"attr:{'class':mainclass}\">  <div class=\"PhotoPost__Image\">    <img class=\"PhotoPost__Image__Src\" />  </div>  <div class=\"PhotoPost__Stats\">    <div class=\"PhotoPost__Stats__Like\">      <div class=\"PhotoPost__Stats__Like__Icon\"></div>    </div>    <div class=\"PhotoPost__Stats__Details\">    </div>  </div></div>";            var viewmodel = (function(){              function PhotoPost_vm(params,element){                this.Node_Type = 'PhotoPost';                this.Node = element;                this.mainclass = ko.observable('PhotoPost');                this.name = ko.observable('');
                /* Place Properties Here */                /* important! this is what ties this viewmodel to the main class,                 * whenever a new vm is made it calls its constructor which is the                 * main class constructor */                this.methods = this.constructor()                .viewmodel(this)                .call();              }              /* Place Prototypes here */              return PhotoPost_vm;            }());            /* BluePrint Include */            var blueprint = {            register_PhotoPost:function register_PhotoPost(CreatePhotoPost,viewmodel,template){              if(typeof define === 'function' && define.amd){                define('CreatePhotoPost',[],function(){return CreatePhotoPost});              }              else if(typeof module === "object" && module.exports){                module.exports = CreatePhotoPost;              }              viewmodel.prototype.constructor = CreatePhotoPost;              if(ko && !ko.components.isRegistered(('PhotoPost').toLowerCase())){                ko.components.register(('PhotoPost').toLowerCase(),{viewModel:viewmodel,template:template});              }            }            }            /* End Blueprint Include */    /* END BUILD SECTION */	function CreatePhotoPost(){      var vm = {};      /* Add Private _variables here */      var _liked = false;      /* ex: private for functional property         *         *   var _example = '';        */      function PhotoPost(){        /* 'vm' refers to the viewmodel         * whenever you update something in code always call the constructor for updating the viewmodel */        /* Update viewmodel properties here */        vm.mainclass('PhotoPost' + (_liked ? ' PhotoPost--liked' : ''));        /* ex: updates the class attr with a changed state         *         *   vm.mainclass('PhotoPost' + (_example ? ' PhotoPost--'+_example : ''));        */      }      PhotoPost.viewmodel = function(v){        if(v === undefined){          return vm;        }        vm = (v instanceof viewmodel ? v : vm);        return PhotoPost;      }      PhotoPost.liked = function(v){        if(v === undefined){          return _liked;        }        _liked = !!v;        return PhotoPost;      }      PhotoPost.getImage = function(){      }      /* add methods for updating and type checking viewmodel properties */      /* ex: functional property, returns value if nothing, sets if value is string         *         *   PhotoPost.example = function(v){         *     if(v === undefined){         *        return _example;         *     }         *     _example = (typeof v === 'string' ? v : _example);         *     return PhotoPost;         *   }        */      return PhotoPost;	}    blueprint.register_PhotoPost(CreatePhotoPost,viewmodel,template);	return CreatePhotoPost;}());
